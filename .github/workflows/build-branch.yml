#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#
#  Â© 2022 Telenav, Inc.
#  Licensed under Apache License, Version 2.0
#
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#
# GitHub action that builds code on push or pull request.
#

defaults:
  run:
    shell: bash

env:
    CACTUS_VERSION: 1.5.18

name: "Build Branch"

on:
  workflow_dispatch:
  push:
    paths-ignore:
        - 'documentation/**'
        - '**/*.md'
    branches:
      - develop
      - 'release/**'
      - feature/**'
      - 'hotfix/**'
      - '!*-wip'
  pull_request:
    paths-ignore:
        - 'documentation/**'
        - '**/*.md'
    branches:
      - develop
      - 'release/**'
      - feature/**'
      - 'hotfix/**'

jobs:
  build:

    runs-on: ubuntu-latest

    steps:

      # Use an env var for the project name, so this workflow can be reused
      # for everything. Eventually we can make it a shared workflow once it's
      # sufficiently robust.
      - name: Set up PROJECT Environment
        run: echo "PROJECT=$(basename $GITHUB_REPOSITORY)" >> $GITHUB_ENV

      - name: Collect Timestamp for Maven Repo
        run: echo "WHEN=$(date '+%s')" >> $GITHUB_ENV

      - name: Set Up Empty Local Maven Repository
        run: echo "MAVEN_REPO=/tmp/mr-${WHEN}" >> $GITHUB_ENV

      # Debug shell quoting
      - name: Print Environment
        run: cat $GITHUB_ENV

      # We need this because we will create a commit in order to ensure that when
      # The build runs, there are no local changes (cactus may check this, so a
      # consistent state is good to have)
      - name: Configure Git
        run: git config --global user.email "nobody@nowhere.com" && git config --global user.name "Nobody"

      - name: Set Up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set Up Maven
        uses: stCarolas/setup-maven@v4.3
        with:
          maven-version: 3.8.5

      - name: Clone Telenav-Build
        run: git clone https://github.com/Telenav/telenav-build.git -b develop

      - name: Init Submodules
        run: cd $GITHUB_WORKSPACE/telenav-build && git submodule init

      # Delete the assets submodules before we do anything, since we
      # do not need them and they are huge and will slow down the job
      # considerably.
      - name: Remove Cactus Assets Before Updating Submodules
        run: cd $GITHUB_WORKSPACE/telenav-build && git rm -f cactus-assets

      - name: Remove Kivakit Assets Before Updating Submodules
        run: cd $GITHUB_WORKSPACE/telenav-build && git rm -f kivakit-assets

      - name: Remove Lexakai Assets Before Updating Submodules
        run: cd $GITHUB_WORKSPACE/telenav-build && git rm -f lexakai-assets

      - name: Remove Mesakit Assets Before Updating Submodules
        run: cd $GITHUB_WORKSPACE/telenav-build && git rm -f mesakit-assets
        
      # If we use MAVEN_OPTS, we wind up in a shell-quoting war between yaml
      # and bash that ends in NoClassDefFoundError:-XX:+UseG1GC - so instead,
      # we write .mvn/jvm.config instead, and make sure that it won't get
      # picked up as a local change by the branch switch mojo by ignoring it.
      - name: Set Up Maven JVM Config Dir
        run: mkdir -p $GITHUB_WORKSPACE/telenav-build/.mvn

      - name: Ignore Maven Config Dir
        run: echo ".mvn/" >> $GITHUB_WORKSPACE/telenav-build/.gitignore

      # See: https://www.baeldung.com/maven-logging for a summary of logging
      # options
      - name: Write Maven JVM Options Config File
        run: echo "-XX:+UseG1GC -Dcactus-maven-plugin.version=$CACTUS_VERSION -Dorg.slf4j.simpleLogger.defaultLogLevel=warn -Dmaven.repo.local=$MAVEN_REPO --add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.lang.reflect=ALL-UNNAMED --add-opens=java.base/java.text=ALL-UNNAMED --add-opens=java.desktop/java.awt.font=ALL-UNNAMED" >> $GITHUB_WORKSPACE/telenav-build/.mvn/jvm.config

      # Maven arguments we want for everything.
      # RESIST the temptation to add --quiet here - it will suppress critical
      # diagnostics when there are build file or plugin problems.  Also
      # do not add -T / --threads here - it is faster but hit-or-miss you're
      # relying on every plugin author whose code might run actually being good
      # at concurrent programming.
      - name: Write Maven Config File
        run: echo "--no-transfer-progress --batch-mode" >> $GITHUB_WORKSPACE/telenav-build/.mvn/maven.config
        
      # For consistency, ensure nothing we run (such as cactus tests) will
      # detect that they are running in a modified repository
      - name: Ensure No Apparent Local Changes
        run: cd $GITHUB_WORKSPACE/telenav-build && git add -A && git commit -m "----remove-assets----"

      # Now we are ready to pull git submodules
      - name: Update Submodules
        run: cd $GITHUB_WORKSPACE/telenav-build && git submodule update

      # We need findable superpoms to be able to run the plugin to check out the
      # target branch at all, so build them once even though we will probably
      # clobber them with a different version momentarily
      - name: Build Local Superpoms
        run: cd $GITHUB_WORKSPACE/telenav-build/telenav-superpom && mvn install

      # This will fail over to the develop branch if the target branch does not
      # exist.
      - name: Checkout Branch
        run: cd $GITHUB_WORKSPACE/telenav-build && mvn -Dcactus.permit-local-changes=true -Dcactus.base-branch=develop -Dcactus.fetch-first=false -Dcactus.scope=all-project-families -Dcactus.create-branches=true -Dcactus.target-branch=$GITHUB_REF_NAME -Dcactus.permit-local-changes=false -Dcactus.update-root=false -Dpush=false com.telenav.cactus:cactus-maven-plugin:$CACTUS_VERSION:checkout

      # Check out the pull request branch or commit that we
      # want to test
      - name: Move Project to Target Ref
        run: cd $GITHUB_WORKSPACE/telenav-build/$PROJECT && git checkout $GITHUB_REF

      # Need to build superpoms, as they may be unpublished
      - name: Build Superpoms
        run: cd $GITHUB_WORKSPACE/telenav-build && mvn -f telenav-superpom/pom.xml install

      # Now build the real thing
      - name: Build Target Commit
        run: cd $GITHUB_WORKSPACE/telenav-build && mvn -X install

      # And *always* delete the local repo
      - name: Clean Up Local Maven Repo
        if: always()
        run: rm -Rf $MAVEN_REPO
