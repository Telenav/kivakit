Issues:

- BufferedOutputStream twice:
    ZipEnty.onOpenForWriting
    BaseWritableResource.openForWriting; change as IO.buffer() or make clear responsibility(framework do)?
- ObjectField Naming: Object, field, versionedValue
    ObjectField.saveObject -> ObjectField.save
    ZipArchive.save(.., .., object) -> ZipArchive.save(.., .., versionedValue)
- entryName: objName.fieldName, e.g. "text.x"
     ZipArchive.entry(pathname) -> entryName
     ...
- Codec is NullCodec, not ZipCodec
- Not close entry in ZipArchive.load, Not close session in ZipArchive.save;
  Both ZipEntry and KryoSerializationSession cloud close BufferedOutputStream;
  SRP : one place is responsible for close stream
- Concurrency of KryoSerializationSession, which is shared from out of ZipArchive

------

Diagrams:

1. Field Archive Types
2. Save Field Archive
3. Load Field Archive

------

1. Field Archive Types

@startuml

    !include ../lexakai.theme

    title "Field Archive Types"

    class FieldArchive {
        - zip : ZipArchive
        - session : SerializationSession
        + saveFieldsOf(namedObject, version)
        + loadFieldsOf(namedObject) : boolean
    }

    class "FieldArchive.ObjectField" as FO {
        - object : Object
        - field : Property
        + save(session) : boolean
    }

    FieldArchive .down.> FO : creates

    class ZipArchive {
        {static} open(File) : ZipArchive
        ---
        - filesystem : FileSystem
        ---
        + save(session, entryName, versionedValue)
        + load(session, entryName) : versionedValue
        + entry(entryName) : ZipEntry
    }

    class ZipEntry {
        - path : Path
        ---
        + onOpenForReading() : InputStream
        + onOpenForWriting() : OutputStream
    }

    abstract class BaseWritableResource ##[dotted]

    FieldArchive -right-> ZipArchive
    ZipArchive .up.> "*" ZipEntry : generates
    ZipEntry -up-^ BaseWritableResource

    interface SerializationSession {
        {abstract} + open(inputStream, outputStream)
        {abstract} + write(versionedValue)
        {abstract} + read() : versionedValue
        {abstract} + flush()
        {abstract} + onClose()
        ---
        + close()
    }

    class KryoSerializationSession {
        + open(inputStream, outputStream)
        + write(versionedValue)
        + read() : versionedValue
        + flush()
        + onClose()
    }

    ZipArchive .down.> SerializationSession : uses
    KryoSerializationSession .up.^ SerializationSession

    package java.nio.file {

        abstract class FileSystem {
            {abstract} + getPath(entryName) : Path
            {abstract} + provider() : FileSystemProvider
            ---
        }

        interface Path {
            {abstract} + getFileSystem() : FileSystem
        }

    }

    package java.nio.zipfs {

        class ZipFileSystem {
            + getPath(entryName) : ZipPath
            + provider() : ZipFileSystemProvider
            ~ newInputStream(zipPath) : InputStream
            ~ newOutputStream(zipPath) : OutputStream
        }

        class ZipPath {
            - zfs : ZipFileSystem
            - objName.fieldName
            + getFileSystem() : ZipFileSystem
        }

    }

    ZipArchive -right-> FileSystem
    ZipFileSystem -up-^ FileSystem
    FileSystem .right.> "*" Path : generates
    ZipPath .up.^ Path
    ZipPath "*" -left-> "1" ZipFileSystem : reference >

    'ZipEntry -[hidden]-> Path

@enduml

2. Save Field Archive

@startuml

    !include ../lexakai.theme

    title "Save Field Archive"

    autoactivate on

    actor Client
    participant "archive\n:FieldArchive" as archive <<resource>>
    participant ":FieldArchive\n.ObjectField" as field <<resource>>
    participant "session\n:SerializationSession" as session <<serialization>>
    participant ":ZipArchive" as zip <<resource>>
    participant ":ZipFileSystem" as fileSystem <<java>>
    participant ":ZipEntry" as entry <<resource>>
    participant ":Codec" as codec <<resource>>

    note right of Client
        file : kivakit.filesystem.File
        sessionFactory : kivakit.serialization.SerializationSessionFactory
    end note
    Client -> archive ** : new(\n  file, sessionFactory)

    note right archive
        create lazy session by sessionFactory
    end note
    archive ->> session ** : new()

    archive -> zip ** : __open__(file)
    zip ->> fileSystem ** : new(filePath)
    note left of fileSystem
        before new ZipArchive
        via FileSystems.newFileSystem()
        creates physical file
    end note

    Client -> archive : saveFiledsOf(\n  namedObject, version)

    loop properties of namedObject
        archive -> field ** : new(namedObject, \n  field)
        archive -> field : save(session)
        field -> zip : save(session, \n  entryName, \n  versionedValue)
        note right of field
            entryName: objName.fieldName
        end note

        zip -> zip : entry(entryName)
        zip -> fileSystem : getPath(entryName)
        return zipPath
        zip -> entry ** : new(zipPath)
        return zipEntry

        entry -> codec ** : new()
        note left of codec
            file-extension ->
                GzipCodec;
                ZipCodec;
                NullCodec;
        end note

        zip -> entry : BaseWritableResource\n::openForReading()
        entry -> entry : onOpenForWriting()

        entry -> fileSystem : newOutputStream(zipPath)
        note right fileSystem
            Files.newOutputStream(zipPath)
             -> provider.newOutputStream()
              -> zipPath.newOutputStream()
               -> zfs.newOutputStream()
        end note
        return outputStream

        entry -> codec : compressed(outputStream)
        return

        return
        return outputStream

        zip -> session : open(output)
        return
        zip -> session : write(versionedValue)
        return
        zip -> session : flush()
        return

        zip -> entry : close()
        return

        return
        return true
    end loop

    return

@enduml

3. Load Field Archive

@startuml

    !include ../lexakai.theme

    title "Load Field Archive"

    autoactivate on

    actor Client
    participant "archive\n:FieldArchive" as archive <<resource>>
    participant "session\n:SerializationSession" as session <<serialization>>
    participant ":ZipArchive" as zip <<resource>>
    participant ":ZipFileSystem" as fileSystem <<java>>
    participant ":ZipEntry" as entry <<resource>>
    participant ":Codec" as codec <<resource>>

    note right of Client
        file : kivakit.filesystem.File
        sessionFactory : kivakit.serialization.SerializationSessionFactory
    end note
    Client -> archive ** : new(\n  file, sessionFactory)

    note right archive
        create lazy session by sessionFactory
    end note
    archive ->> session ** : new()

    archive -> zip ** : __open__(file)
    zip ->> fileSystem ** : new(filePath)
    note left of fileSystem
        before new ZipArchive
        via FileSystems.newFileSystem()
        creates physical file
    end note

    Client -> archive : loadFieldsOf(\n  namedObject)

    loop properties of namedObject
        archive -> zip : load(session, \n  entryName)
        note right of archive
            entryName: objName.fieldName
        end note

        zip -> zip : entry(entryName)
        zip -> fileSystem : getPath(entryName)
        return zipPath
        zip -> entry ** : new(zipPath)
        return zipEntry

        entry -> codec ** : new()
        note left of codec
            file-extension ->
                GzipCodec;
                ZipCodec;
                NullCodec;
        end note

        zip -> entry : BaseReadableResource\n::openForReading()
        entry -> entry : onOpenForReading()

        entry -> fileSystem : newInputStream(zipPath)
        note right fileSystem
            Files.newInputStream(zipPath)
             -> provider.newInputStream()
              -> zipPath.newInputStream()
               -> zfs.newInputStream()
        end note
        return inputStream

        entry -> codec : decompressed(inputStream)
        return

        return
        return inputStream

        zip -> session : open(input)
        return
        zip -> session : read()
        return versionedValue
        zip -> session : close()
        return

        return true
    end loop

    return

@enduml
