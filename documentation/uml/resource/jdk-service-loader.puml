Diagrams:

1. Service Loader
2. Load Service Provider

------

1. Service Loader

@startuml

    !include ../lexakai.theme

    title "Service Loader"

    class ServiceLoader<ServiceType> {
        {static} + load(serviceTypeClass) : ServiceLoader<ServiceType>
        ---
        - service : Class<ServiceType>
        - lookupIterator : Iterator<Provider<ServiceType>>
        - instantiatedProviders : List<ServiceType>
        ---
        + iterator() : Iterator<ServiceType>
        - loadProvider(ServiceProvider) : Provider<ServiceType>
    }

    interface Provider<ServiceType> {
        {abstract} + type() : Class<^ServiceType>
        {abstract} + get() : ServiceType
    }

    class ProviderImpl<ServiceType> {
        - service : Class<ServiceType>
        - ctor : Constructor<^ServiceType>
        + get() : ServiceType
        - newInstance() : ServiceType
    }

    ProviderImpl .u.^ Provider

    class LayerLookupIterator<Provider<ServiceType>> {
        ~ stack : Deque<ModuleLayer>
        ~ iterator : Iterator<ServiceLoader>
        ~ nextProvider : Provider<ServiceType>
        + hasNext() : boolean
        + next() : Provider<ServiceType>
    }

    class ModuleServicesLookupIterator<Provider<ServiceType>> {
        ~ currentLoader : ClassLoader
        ~ iterator : Iterator<ServiceLoader>
        ~ nextProvider : Provider<ServiceType>
        + hasNext() : boolean
        + next() : Provider<ServiceType>
        - iteratorFor(ClassLoader) : Iterator<ServiceProvider>
    }

    class LazyClassPathLookupIterator<Provider<ServiceType>> {
        ~ configs : Enumeration<URL>
        ~ nextProvider : Provider<ServiceType>
        + hasNext() : boolean
        + next() : Provider<ServiceType>
        - hasNextService() : boolean
        - nextProviderClass() : Class<?>
        - parse(URL) : Iterator<String>
    }

    class AnonymousLookupIterator<Provider<ServiceType>> {
        - first : ModuleServicesLookupIterator
        - second : LazyClassPathLookupIterator
        + hasNext() : boolean
        + next() : Provider<ServiceType>
    }

    class AnonymousIterator<ServiceType> {
        - index : int
        + hasNext() : boolean
        + next() : ServiceType
    }

    <> switch
    ServiceLoader -d- switch : lookupIterator
    switch -d-> "0..1" LayerLookupIterator
    switch -d-> "0..1" AnonymousLookupIterator
    LayerLookupIterator -r[hidden] AnonymousLookupIterator
    ServiceLoader .r.> AnonymousIterator : provides

    AnonymousLookupIterator -r-> ModuleServicesLookupIterator
    AnonymousLookupIterator -r-> LazyClassPathLookupIterator
    ModuleServicesLookupIterator -r[hidden]- LazyClassPathLookupIterator

    LayerLookupIterator -d-> Provider
    ModuleServicesLookupIterator -d-> Provider
    LazyClassPathLookupIterator -d-> Provider

@enduml

2. Load Service Provider

@startuml

    !include ../lexakai.theme

    title "Load Service Provider"

    autoactivate on

    actor Client
    participant ":ServiceLoader" as loader
    participant ":Anonymous\nIterator" as iterator
    participant ":Anonymous\nLookupIterator" as lookup
    participant ":ModuleServices\nLookupIterator" as first
    participant ":LazyClassPath\nLookupIterator" as second
    participant ":ProviderImpl" as provider

    Client -> loader ** : __load__(serviceTypeClass)
    Client -> loader : iterator()
    loader -> first **
    loader -> second **
    loader -> lookup ** : new(moduleServicesLookupIterator,\n       lazyClassPathLookupIterator)
    loader -> iterator **
    return iterator

    Client -> iterator : hasNext()
    iterator -> lookup : hasNext()

    lookup -> first : hasNext()
    note right first
        find service provider from catalog of ClassLoader
        {AppClassLoader, PlatformClassLoader, BootClassLoader}

        if found, load nextProvider
    end note
    return

    alt no next in ModulesServices
        lookup -> second : hasNext()
        second -> second : hasNextService()
        second -> second : nextProviderClass()
        note right second
            [configs is null]
            serviceLoader.configs
                = classLoader.getResource(configFile)
        end note
        second -> second : parse()
        return service provider classes\n  iterator
        return next provider class
        second -> provider **  : new(constructor)
        return
        return
    end alt

    return
    return

    Client -> iterator : next()
    iterator -> lookup : next()

    alt has next
        lookup -> first : next()
        return nextProvider
    end alt
    alt has next
        lookup -> second : next()
        return nextProvider
    end alt

    return
    iterator -> provider : get()
    return service instance
    return service instance

@enduml
