
@startuml

    !include lexakai.theme
    
    title "Resources"
    
    abstract BaseRepeater
    abstract BaseReadableResource
    abstract BaseResourceList
    
    interface WritableResource
    interface UriIdentified
    interface ResourcePathed
    interface Resource
    
    BaseRepeater <|-- BaseReadableResource
    Resource <|-- BaseReadableResource
    abstract class BaseReadableResource
    {
        --(constructors)--
        #BaseReadableResource()
        #BaseReadableResource(BaseReadableResource)
        #BaseReadableResource(ResourcePath)
        --
        +BaseReadableResource codec(Codec)
        #void charset(Charset)
    }
    
    BaseReadableResource <|-- BaseWritableResource
    WritableResource <|-- BaseWritableResource
    abstract class BaseWritableResource
    {
        --(constructors)--
        #BaseWritableResource()
        #BaseWritableResource(BaseWritableResource)
        #BaseWritableResource(ResourcePath)
        --(filesystem)--
        +void copyFrom(Resource, CopyMode, ProgressReporter)
        --(write)--
        +void save(Listener, InputStream, ProgressReporter)
        +Resource saveText(String text)
    }
    
    ResourcePath <|-- PackagePath
    class PackagePath
    {
        --
        +Class<?> packageType()
        --(checks)--
        +boolean hasPackageType()
        --(conversion)--
        +Package asPackage(Listener)
        +PackageReference asPackageReference()
        --(path)--
        +Set<PackagePath> directorySubPackages(Listener)
        +boolean isPackagePath(String path)
        +Set<PackagePath> jarSubPackages(Listener)
        +PackagePath packagePath(PackageReference)
        +PackagePath packagePath(Class<?> type, StringPath)
        +PackagePath packagePath(StringPath)
        +PackagePath packagePath(Class<?> type)
        +PackagePath parsePackagePath(Listener, String path)
        +PackagePath parsePackagePath(Listener, Class<?> type, String relativePath)
        +PackagePath withPackageType(Class<?> type)
    }
    
    interface Readable
    interface Repeater
    Readable <|-- ReadableResource
    Repeater <|-- ReadableResource
    ReadableResource --> ResourceReader : "provides"
    interface ReadableResource
    {
        --
        +Charset charset()
        +Resource resource()
        --(conversion)--
        +StringResource asStringResource()
        --(filesystem)--
        +void copyTo(WritableResource destination, CopyMode, ProgressReporter)
        --(read)--
        +ResourceReader reader(ProgressReporter)
        +ResourceReader reader(ProgressReporter, Charset)
        +ResourceReader reader()
    }
    
    interface AsString
    interface ByteSized
    interface CreatedAt
    interface Deletable
    interface Modifiable
    interface ModifiedAt
    interface ReadableResource
    interface Repeater
    interface ResourcePathed
    interface Resourceful
    interface UriIdentified
    ResourcePathed <|-- Resource
    Modifiable <|-- Resource
    ModifiedAt <|-- Resource
    CreatedAt <|-- Resource
    Deletable <|-- Resource
    ByteSized <|-- Resource
    AsString <|-- Resource
    ReadableResource <|-- Resource
    Repeater <|-- Resource
    Resourceful <|-- Resource
    UriIdentified <|-- Resource
    Resource --> Codec : "uses"
    interface Resource
    {
        --
        +boolean can(Action)
        +ObjectSet<Action> can()
        +Codec codec()
        +void dematerialize()
        +Resource relativeTo(ResourceFolder<?>)
        +Resource resolveResource(Listener, String identifier)
        +Resource resolveResource(Listener, ResourceIdentifier)
        +Resource resolveResource(Listener, ResourcePath)
        --(checks)--
        +boolean endsWith(String end)
        +boolean hasParent()
        +boolean isEmpty()
        +boolean isLocal()
        +boolean isMaterializable()
        +boolean isOlderThan(Resource that)
        +boolean isPackaged()
        +boolean isRemote()
        +boolean isSame(Resource that)
        --(command line parsing)--
        +ArgumentParser.Builder<Resource> resourceArgumentParser(Listener, String description)
        +SwitchParser.Builder<Resource> resourceSwitchParser(Listener, String name, String description)
        --(conversion)--
        +WritableResource asWritable()
        --(filesystem)--
        +void ensureExists()
        +boolean exists()
        +ResourceFolder<?> parent()
        +boolean renameTo(Resource that)
        +void safeCopyTo(ResourceFolder<?> destination, CopyMode)
        +void safeCopyTo(WritableResource destination, CopyMode)
        +void safeCopyTo(WritableResource destination, CopyMode, ProgressReporter)
        +void safeCopyTo(ResourceFolder<?> destination, CopyMode, ProgressReporter)
        --(functional)--
        +Resource materialized(ProgressReporter)
        --(identity)--
        +ResourceIdentifier resourceIdentifier(String identifier)
    }
    
    BaseResourceList <|-- ResourceList
    ResourceList --> Resource : "contains"
    class ResourceList
    {
        --(constructors)--
        +ResourceList()
        +ResourceList(Iterable<? extends Resource>)
        --(collection)--
        +ResourceList resourceList(Resource... resources)
        +ResourceList resourceList(Iterable<? extends Resource> resources)
    }
    
    StringPath <|-- ResourcePath
    UriIdentified <|-- ResourcePath
    ResourcePathed <|-- ResourcePath
    class ResourcePath
    {
        --(constructors)--
        #ResourcePath(ResourcePath)
        #ResourcePath(StringList, List<String>)
        #ResourcePath(StringList, String, List<String>)
        --(checks)--
        +boolean hasScheme()
        +boolean hasTrailingSlash()
        --(collection)--
        +StringList schemes()
        --(filesystem)--
        +File asFile()
        --(path)--
        +ResourcePath asAbsolute()
        +FilePath asFilePath()
        +ResourcePath normalized()
        +ResourcePath parseResourcePath(Listener, String path)
        +ResourcePath parseUnixResourcePath(Listener, String path)
        +ResourcePath relativeTo(ResourcePath)
        +ResourcePath resourcePath(StringPath)
        +SwitchParser.Builder<ResourcePath> resourcePathSwitchParser(Listener, String name, String description)
        +FilePath withExtension(Extension)
        +ResourcePath withSchemes(StringList schemes)
        +ResourcePath withoutSchemes()
    }
    
    interface UriIdentified
    UriIdentified <|-- ResourcePathed
    ResourcePathed --> ResourcePath : "supplies"
    interface ResourcePathed
    {
        --
        +boolean matches(Matcher<String>)
        --(filesystem)--
        +java.io.File asJavaFile()
        +FileName baseFileName()
        +Extension compoundExtension()
        +Extension extension()
        +FileName fileName()
        +boolean hasExtension(Extension)
        --(network)--
        +URL url()
        --(path)--
        +ResourcePath path()
    }
    
    class ResourceReader
    {
        --(constructors)--
        +ResourceReader(ProgressReporter, Resource)
        +ResourceReader(ProgressReporter, Resource, Charset)
        --(read)--
        +byte[] readBytes()
        +StringList readLines()
        +StringList readLines(ProgressReporter)
        +void readLines(ProgressReporter, Consumer<String>)
        +ObjectList<T> readList(ProgressReporter, Converter<String,T>)
        +ObjectList<T> readList(ProgressReporter, Function<String,T> converter)
        +void readObjects(ProgressReporter, Function<String,T> converter, Consumer<T>)
        +void readObjects(ProgressReporter, Converter<String,T>, Consumer<T>)
        +ObjectSet<T> readSet(ProgressReporter, Converter<String,T>)
        +String readText(ProgressReporter)
        +String readText()
        +Reader textReader()
    }
    
    class ResourceWriter
    {
        --(constructors)--
        +ResourceWriter(WritableResource)
        +ResourceWriter(WritableResource, Charset)
        --
        +Charset charset()
        --(write)--
        +PrintWriter printWriter()
        +void saveText(String text)
        +Writer textWriter()
    }
    
    interface Resource
    interface Writable
    Resource <|-- WritableResource
    Writable <|-- WritableResource
    WritableResource --> ResourceWriter : "provides"
    interface WritableResource
    {
        --(write)--
        +PrintWriter printWriter()
        +ResourceWriter writer()
        +ResourceWriter writer(Charset)
    }
    
@enduml

