
@startuml

    !include lexakai.theme
    
    title "com.telenav.kivakit.network.http"
    
    abstract BaseNetworkResource
    abstract BaseHttpResource
    abstract BaseStringConverter
    
    interface Resourceful
    interface HttpRequestFactory
    interface ResourceResolver
    
    BaseNetworkResource <|-- BaseHttpResource
    HttpRequestFactory <|-- BaseHttpResource
    BaseHttpResource --> HttpStatus : "yields"
    BaseHttpResource o-- NetworkAccessConstraints
    BaseHttpResource o-- NetworkLocation
    abstract class BaseHttpResource
    {
        --(constructors)--
        #BaseHttpResource(NetworkLocation, NetworkAccessConstraints)
        --
        +String contentType()
        +String encoding()
        --(collection)--
        +VariableMap<String> responseHeader()
        --(network)--
        +String httpHeadRequestContentType()
        +String httpHeadRequestHeaderField(String fieldName)
        +HttpStatus status()
        #HttpClient newClient()
        #HttpRequest newRequest()
    }
    
    BaseStringConverter <|-- HttpNetworkLocation.Converter
    class HttpNetworkLocation.Converter
    {
        --(constructors)--
        +Converter(Listener)
    }
    
    NetworkAccessConstraints <|-- HttpAccessConstraints
    HttpAccessConstraints o-- HttpBasicCredentials
    class HttpAccessConstraints
    {
        --(network)--
        +HttpBasicCredentials httpBasicCredentials()
        +void httpBasicCredentials(HttpBasicCredentials)
    }
    
    class HttpBasicCredentials
    {
        --(constructors)--
        +HttpBasicCredentials(UserName, Password)
        --
        +Password password()
        --(naming)--
        +UserName userName()
    }
    
    TimeConverter <|-- HttpDateTimeConverter
    class HttpDateTimeConverter
    {
        --(constructors)--
        +HttpDateTimeConverter(Listener)
    }
    
    BaseHttpResource <|-- HttpGetResource
    class HttpGetResource
    {
        --(constructors)--
        +HttpGetResource(NetworkLocation, NetworkAccessConstraints)
    }
    
    ResourceResolver <|-- HttpGetResourceResolver
    class HttpGetResourceResolver
    {
    }
    
    enum HttpMethod
    {
        CONNECT
        DELETE
        GET
        HEAD
        NULL_HTTP_METHOD
        OPTIONS
        PATCH
        POST
        PUT
        TRACE
    }
    
    NetworkLocation <|-- HttpNetworkLocation
    Resourceful <|-- HttpNetworkLocation
    HttpNetworkLocation --> HttpGetResource : "creates"
    HttpNetworkLocation --> HttpPostResource : "creates"
    HttpNetworkLocation --> HttpPutResource : "creates"
    class HttpNetworkLocation
    {
        --(constructors)--
        +HttpNetworkLocation(NetworkLocation)
        +HttpNetworkLocation(NetworkPath)
        --
        +String content(Listener)
        --(network)--
        +HttpNetworkLocation child(String child)
        +HttpGetResource get(String contentType)
        +HttpGetResource get(NetworkAccessConstraints, String contentType)
        +HttpGetResource get()
        +HttpGetResource get(NetworkAccessConstraints)
        +HttpNetworkLocation parent()
        +HttpNetworkLocation parseHttpNetworkLocation(Listener, String path)
        +HttpPostResource post()
        +HttpPostResource post(NetworkAccessConstraints)
        +HttpPostResource post(NetworkAccessConstraints, String contentType, String content)
        +HttpPostResource post(NetworkAccessConstraints, String content)
        +HttpPostResource post(String content)
        +HttpPostResource post(String contentType, String content)
        +HttpPutResource put(NetworkAccessConstraints, String contentType, String content)
        +HttpPutResource put(String contentType, String content)
    }
    
    BaseHttpResource <|-- HttpPostResource
    class HttpPostResource
    {
        --(constructors)--
        +HttpPostResource(NetworkLocation, NetworkAccessConstraints)
    }
    
    BaseHttpResource <|-- HttpPutResource
    class HttpPutResource
    {
        --(constructors)--
        +HttpPutResource(NetworkLocation, NetworkAccessConstraints)
    }
    
    interface HttpRequestFactory
    {
        --
        +void header(HttpRequest, String key, String value)
        --(lifecycle)--
        +void onInitialize(HttpRequest)
        +void onInitialize(HttpRequest.Builder)
        --(network)--
        +HttpRequest build(URI)
    }
    
    enum HttpStatus
    {
        ACCEPTED
        BAD_GATEWAY
        BAD_REQUEST
        CONFLICT
        CONTINUE
        CREATED
        EXPECTATION_FAILED
        FAILED_DEPENDENCY
        FORBIDDEN
        GATEWAY_TIMEOUT
        GONE
        HTTP_VERSION_NOT_SUPPORTED
        INSUFFICIENT_SPACE_ON_RESOURCE
        INSUFFICIENT_STORAGE
        INTERNAL_SERVER_ERROR
        LENGTH_REQUIRED
        LOCKED
        METHOD_FAILURE
        METHOD_NOT_ALLOWED
        MOVED_PERMANENTLY
        MOVED_TEMPORARILY
        MULTIPLE_CHOICES
        MULTI_STATUS
        NON_AUTHORITATIVE_INFORMATION
        NOT_ACCEPTABLE
        NOT_FOUND
        NOT_IMPLEMENTED
        NOT_MODIFIED
        NO_CONTENT
        OK
        PARTIAL_CONTENT
        PAYMENT_REQUIRED
        PRECONDITION_FAILED
        PROCESSING
        PROXY_AUTHENTICATION_REQUIRED
        REQUESTED_RANGE_NOT_SATISFIABLE
        REQUEST_TIMEOUT
        REQUEST_TOO_LONG
        REQUEST_URI_TOO_LONG
        RESET_CONTENT
        SEE_OTHER
        SERVICE_UNAVAILABLE
        SWITCHING_PROTOCOLS
        TEMPORARY_REDIRECT
        UNAUTHORIZED
        UNPROCESSABLE_ENTITY
        UNSUPPORTED_MEDIA_TYPE
        USE_PROXY
    }
    
@enduml

