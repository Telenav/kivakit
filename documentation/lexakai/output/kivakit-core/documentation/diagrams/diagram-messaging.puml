
@startuml

    !include lexakai.theme
    
    title "Messaging"
    
    interface RepeaterMixin
    interface Named
    
    Level <|-- Importance
    class Importance
    {
        --
        +Importance importance(double level)
        --(lookup)--
        +Importance registerImportance(Class<? extends Message> low, Class<? extends Message> high)
        --(messaging)--
        +Importance importanceOfMessage(Class<? extends Message> type)
    }
    
    interface Named
    interface Transmittable
    interface Triaged
    Transmittable <|-- Message
    Triaged <|-- Message
    Named <|-- Message
    Message --> Importance : "message importance"
    Message --> Message.OperationStatus : "operation status"
    Message --> Severity : "message severity"
    Message --> Message.Status : "message status"
    interface Message
    {
        --
        +Throwable cause()
        +CodeContext context()
        +String description()
        +String formatted(MessageFormat...)
        +String formatted()
        +Importance importance()
        +String text()
        +^Severity severity()
        --(command line parsing)--
        +Object[] arguments()
        --(conversion)--
        +RuntimeException asException()
        --(messaging)--
        +Message cause(Throwable cause)
        +String escapeMessageText(String text)
        +OperationStatus operationStatus()
        +Message parseMessageName(Listener, String name)
        +StackTrace stackTrace()
        +Status status()
        --(status)--
        +boolean isFailure()
        --(time)--
        +Time created()
        +Frequency maximumFrequency()
    }
    
    interface Filter
    Filter <|-- MessageFilter
    interface MessageFilter
    {
        --(filtering)--
        +boolean accepts(Message)
    }
    
    enum Message.OperationStatus
    {
        FAILED
        HALTED
        NOT_APPLICABLE
        RUNNING
        STARTED
        SUCCEEDED
    }
    
    Maybe <|-- Result
    RepeaterMixin <|-- Result
    Result --> Message : "failure reason"
    class Result<Value>
    {
        --(constructors)--
        #Result()
        #Result(Broadcaster)
        #Result(Maybe<Value>)
        #Result(Value)
        --
        +Result<Value> absent()
        +Result<T> capture(Broadcaster value)
        +Maybe<Output> convert(Class<Mapper> mapperType)
        +boolean failed()
        +Result<T> present(T value)
        --(lifecycle)--
        +Result<T> run(Broadcaster, Code<T>)
        --(logical)--
        +Result<Value> or(Code<Value>)
        --(messaging)--
        +MessageList messages()
        +Value orProblem(String message, Object... arguments)
        --(status)--
        +Result<T> failure(Result<T>, String message, Object... arguments)
        +Result<T> failure(T value, String message, Object... arguments)
        +Result<T> failure(Throwable cause, String message, Object... arguments)
        +Result<T> failure(String message, Object... arguments)
        +Result<T> failure(Message)
        +boolean succeeded()
        +Result<T> success(T value)
        +Result<Value> success(Maybe<Value>)
    }
    
    Level <|-- Severity
    Named <|-- Severity
    class Severity
    {
        --(constructors)--
        +Severity(String, double)
        --(parsing)--
        +Severity parseSeverity(Listener, String name)
    }
    
    enum Message.Status
    {
        COMPLETED
        FAILED
        NOT_APPLICABLE
        PROBLEM
        RESULT_COMPROMISED
        RESULT_INCOMPLETE
        SUCCEEDED
    }
    
    Triaged --> Severity : "has"
    interface Triaged
    {
        --
        +Severity severity()
    }
    
@enduml

