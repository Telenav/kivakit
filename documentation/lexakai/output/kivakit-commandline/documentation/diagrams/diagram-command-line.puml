
@startuml

    !include lexakai.theme
    
    title "Command Line"
    
    interface Iterable
    
    class ArgumentParser<T>
    {
    }
    
    ArgumentParserList "1" o-- "*" ArgumentParser
    -class ArgumentParserList
    {
        --
        +String help()
        --(collection)--
        +boolean add(ArgumentParser<?>)
        +boolean isEmpty()
    }
    
    ArgumentValueList "1" o-- "*" ArgumentValue
    class ArgumentValueList
    {
        --(collection)--
        +void add(ArgumentValue)
        --(command line parsing)--
        +ArgumentValue argumentValue(int index)
        +ArgumentValue firstArgumentValue()
    }
    
    Iterable <|-- CommandLine
    CommandLine --> T : "gets arguments"
    CommandLine --> T : "gets switches"
    CommandLine o-- ArgumentValueList
    CommandLine --> CommandLineParser : "parses with"
    CommandLine o-- SwitchValueList
    note top of CommandLine
        See Application for easy access to switches and arguments
    endnote
    class CommandLine
    {
        --(constructors)--
        +CommandLine(CommandLineParser, String[])
        --(command line parsing)--
        +T argument(int index, ArgumentParser<T>)
        +T argument(ArgumentParser<T>)
        +ArgumentValueList argumentValues()
        +ObjectList<T> arguments(ArgumentParser<T>)
        +T get(SwitchParser<T>, T defaultValue)
        +T get(SwitchParser<T>)
        +boolean has(SwitchParser<T>)
        --(lifecycle)--
        +void exit(String error, Object... arguments)
    }
    
    CommandLineParser --> ArgumentValueList : "validates"
    CommandLineParser --> CommandLine : "creates"
    CommandLineParser o-- ArgumentParserList
    CommandLineParser o-- SwitchParserList
    class CommandLineParser
    {
        --(constructors)--
        +CommandLineParser(ApplicationMetadata)
        --(command line parsing)--
        +CommandLineParser add(ArgumentParser<T>)
        +CommandLineParser add(SwitchParser<T>)
        +CommandLine parse(String[] arguments)
        --(lifecycle)--
        #void exit(String message, Object... arguments)
    }
    
    class SwitchParser<T>
    {
    }
    
    SwitchParserList "1" o-- "*" SwitchParser
    -class SwitchParserList
    {
        --
        +String help()
        --(command line parsing)--
        +void add(SwitchParser<?>)
        +SwitchParser<?> forName(String name)
    }
    
    SwitchValueList "1" o-- "*" SwitchValue
    class SwitchValueList
    {
        --(collection)--
        +void add(SwitchValue that)
        --(command line parsing)--
        +T get(SwitchParser<T>)
        +boolean has(SwitchParser<?>)
    }
    
@enduml

